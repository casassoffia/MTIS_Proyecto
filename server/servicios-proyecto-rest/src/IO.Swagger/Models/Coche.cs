/*
 * SERVICIOS PROYECTO
 *
 * API del PROYECTO
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Coche : IEquatable<Coche>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Modelo
        /// </summary>

        [DataMember(Name="modelo")]
        public string Modelo { get; set; }

        /// <summary>
        /// Gets or Sets Marca
        /// </summary>

        [DataMember(Name="marca")]
        public string Marca { get; set; }

        /// <summary>
        /// Gets or Sets NumPuertas
        /// </summary>

        [DataMember(Name="num_puertas")]
        public int? NumPuertas { get; set; }

        /// <summary>
        /// Gets or Sets Puntuacion
        /// </summary>

        [DataMember(Name="puntuacion")]
        public int? Puntuacion { get; set; }

        /// <summary>
        /// Gets or Sets PrecioDia
        /// </summary>

        [DataMember(Name="precio_Dia")]
        public int? PrecioDia { get; set; }

        /// <summary>
        /// Gets or Sets NumPlazas
        /// </summary>

        [DataMember(Name="numPlazas")]
        public int? NumPlazas { get; set; }

        /// <summary>
        /// Gets or Sets Disponible
        /// </summary>

        [DataMember(Name="disponible")]
        public bool? Disponible { get; set; }

        /// <summary>
        /// Gets or Sets Lugar
        /// </summary>

        [DataMember(Name="lugar")]
        public string Lugar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Coche {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Modelo: ").Append(Modelo).Append("\n");
            sb.Append("  Marca: ").Append(Marca).Append("\n");
            sb.Append("  NumPuertas: ").Append(NumPuertas).Append("\n");
            sb.Append("  Puntuacion: ").Append(Puntuacion).Append("\n");
            sb.Append("  PrecioDia: ").Append(PrecioDia).Append("\n");
            sb.Append("  NumPlazas: ").Append(NumPlazas).Append("\n");
            sb.Append("  Disponible: ").Append(Disponible).Append("\n");
            sb.Append("  Lugar: ").Append(Lugar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Coche)obj);
        }

        /// <summary>
        /// Returns true if Coche instances are equal
        /// </summary>
        /// <param name="other">Instance of Coche to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Coche other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Modelo == other.Modelo ||
                    Modelo != null &&
                    Modelo.Equals(other.Modelo)
                ) && 
                (
                    Marca == other.Marca ||
                    Marca != null &&
                    Marca.Equals(other.Marca)
                ) && 
                (
                    NumPuertas == other.NumPuertas ||
                    NumPuertas != null &&
                    NumPuertas.Equals(other.NumPuertas)
                ) && 
                (
                    Puntuacion == other.Puntuacion ||
                    Puntuacion != null &&
                    Puntuacion.Equals(other.Puntuacion)
                ) && 
                (
                    PrecioDia == other.PrecioDia ||
                    PrecioDia != null &&
                    PrecioDia.Equals(other.PrecioDia)
                ) && 
                (
                    NumPlazas == other.NumPlazas ||
                    NumPlazas != null &&
                    NumPlazas.Equals(other.NumPlazas)
                ) && 
                (
                    Disponible == other.Disponible ||
                    Disponible != null &&
                    Disponible.Equals(other.Disponible)
                ) && 
                (
                    Lugar == other.Lugar ||
                    Lugar != null &&
                    Lugar.Equals(other.Lugar)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Modelo != null)
                    hashCode = hashCode * 59 + Modelo.GetHashCode();
                    if (Marca != null)
                    hashCode = hashCode * 59 + Marca.GetHashCode();
                    if (NumPuertas != null)
                    hashCode = hashCode * 59 + NumPuertas.GetHashCode();
                    if (Puntuacion != null)
                    hashCode = hashCode * 59 + Puntuacion.GetHashCode();
                    if (PrecioDia != null)
                    hashCode = hashCode * 59 + PrecioDia.GetHashCode();
                    if (NumPlazas != null)
                    hashCode = hashCode * 59 + NumPlazas.GetHashCode();
                    if (Disponible != null)
                    hashCode = hashCode * 59 + Disponible.GetHashCode();
                    if (Lugar != null)
                    hashCode = hashCode * 59 + Lugar.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Coche left, Coche right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Coche left, Coche right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
