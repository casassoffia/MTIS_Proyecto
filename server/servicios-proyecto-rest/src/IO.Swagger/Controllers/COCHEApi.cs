/*
 * SERVICIOS PROYECTO
 *
 * API del PROYECTO
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using MySql.Data.MySqlClient;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class COCHEApiController : ControllerBase
    {
        public List<Coche> coches = new List<Coche>();

        /// <summary>
        /// Obtiene el coche con mejor puntuación
        /// </summary>
        /// <param name="coches">pasar lista de coches</param>
        /// <response code="200">Coche con mejor puntuación</response>
        /// <response code="400">No hay ningún coche</response>
        [HttpPost]
        [Route("/aditwitter20212022/proyecto/1.0.0/coches")]
        [ValidateModelState]
        [SwaggerOperation("CochesPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Coche), description: "Coche con mejor puntuación")]
        public virtual IActionResult CochesPost([FromBody][Required()] List<Coche> listaCoches)
        {
            Coche mejorCoche = new Coche();
            mejorCoche.Puntuacion = 0;
            string disp = "";
            string exampleJson = "";
            for (int i = 0; i < listaCoches.Count; i++)
            {
                if (listaCoches[i].Puntuacion >= mejorCoche.Puntuacion)
                {
                    mejorCoche = listaCoches[i];
                }
            }
            if (mejorCoche.Disponible.Value)
            {
                disp = "true";
            }
            else
            {
                disp = "false";
            }
            exampleJson = "{\n  \"marca\" : \"" + mejorCoche.Marca.ToString() + "\",\n  \"puntuacion\" : " + mejorCoche.Puntuacion.ToString() + ",\n  \"num_puertas\" : " + mejorCoche.NumPuertas.ToString() + ",\n  \"numPlazas\" : " + mejorCoche.NumPlazas.ToString() + ",\n  \"lugar\" : \"" + mejorCoche.Lugar.ToString() + "\",\n  \"id\" : " + mejorCoche.Id.ToString() + ",\n  \"precio_Dia\" : " + mejorCoche.PrecioDia.ToString() + ",\n  \"modelo\" : \"" + mejorCoche.Modelo.ToString() + "\",\n  \"disponible\" : " + disp.ToString() + "\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Coche>(exampleJson)
            : default(Coche);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Comprobar coches disponibles
        /// </summary>
        /// <param name="listaCoches">Lista de coches que cumplen las características anteriores</param>
        /// <response code="200">Coches con las características</response>
        /// <response code="400">ERROR 400: No hay coches con esas características</response>
        [HttpPost]
        [Route("/aditwitter20212022/proyecto/1.0.0/comprobarDisponibilidadCoche")]
        [ValidateModelState]
        [SwaggerOperation("ComprobarDisponibilidadCochePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Coche>), description: "Coches con las características")]
        public virtual IActionResult ComprobarDisponibilidadCochePost([FromBody][Required()]List<Coche> listaCoches)
        {
            List<Coche> filtradoCoches = new List<Coche>();

            MySqlConnection con = new MySqlConnection();
            con.ConnectionString = "server=localhost;user id=root;database=companiarea;Password=root";
            con.Open();
            for (int i = 0; i < listaCoches.Count; i++)
            {
                if (listaCoches[i].Disponible.Value)
                {
                    filtradoCoches.Add(listaCoches[i]);
                }
            }
            coches = filtradoCoches;

            string exampleJson = "[";
            string disp = "";
            for (int i = 0; i < filtradoCoches.Count; i++)
            {
                if (filtradoCoches[i].Disponible.Value)
                {
                    disp = "true";
                }
                else
                {
                    disp = "false";
                }
                exampleJson += " {\n  \"marca\" : \"" + filtradoCoches[i].Marca.ToString() + "\",\n  \"puntuacion\" : " + filtradoCoches[i].Puntuacion.ToString() + ",\n  \"num_puertas\" : " + filtradoCoches[i].NumPuertas.ToString() + ",\n  \"numPlazas\" : " + filtradoCoches[i].NumPlazas.ToString() + ",\n  \"lugar\" : \"" + filtradoCoches[i].Lugar.ToString() + "\",\n  \"id\" : " + filtradoCoches[i].Id.ToString() + ",\n  \"precio_Dia\" : " + filtradoCoches[i].PrecioDia.ToString() + ",\n  \"modelo\" : \"" + filtradoCoches[i].Modelo.ToString() + "\",\n  \"disponible\" : " + disp.ToString() + "\n}";
                if (i != (filtradoCoches.Count - 1))
                {
                    exampleJson += ", ";
                }
            }
            exampleJson += " ]";
            var example = exampleJson != null
                ? JsonConvert.DeserializeObject<List<Coche>>(exampleJson)
                : default(List<Coche>);
            con.Close();
            if (exampleJson == null)
            {
                return new ObjectResult("ERROR 400: NO EXISTEN COCHES") { StatusCode = 400 };
            }

            return new ObjectResult(exampleJson) { StatusCode = 200 };
        }

        /// <summary>
        /// Comprobar coches para esas caracterísiticas
        /// </summary>
        /// <param name="fechaIn">Check-in con formato YYYY-MM-DD</param>
        /// <param name="fechaOut">Check-out con formato YYYY-MM-DD</param>
        /// <param name="lugar">Pasar lugar de la estancia del coche</param>
        /// <response code="200">Coches con las características</response>
        /// <response code="400">ERROR 400: No hay coches con esas características</response>
        [HttpPost]
        [Route("/aditwitter20212022/proyecto/1.0.0/comprobarFechaLugarCoche/{fechaIn}/{fechaOut}/{lugar}")]
        [ValidateModelState]
        [SwaggerOperation("ComprobarFechaLugarCocheFechaInFechaOutLugarPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Coche>), description: "Coches con las características")]
        public virtual IActionResult ComprobarFechaLugarCocheFechaInFechaOutLugarPost([FromRoute][Required]string fechaIn, [FromRoute][Required]string fechaOut, [FromRoute][Required]string lugar)
        {
            MySqlConnection con = new MySqlConnection();
            con.ConnectionString = "server=localhost;user id=root;database=companiarea;Password=root";

            con.Open();
            MySqlCommand cmdClave1 = new MySqlCommand("ALTER TABLE reservaCoche MODIFY fechaInicio date", con);
            cmdClave1.ExecuteReader();
            con.Close();

            con.Open();
            MySqlCommand cmdClave3 = new MySqlCommand("ALTER TABLE reservaCoche MODIFY fechaFin date", con);
            cmdClave3.ExecuteReader();
            con.Close();

            DateTime fecha1 = DateTime.ParseExact(fechaIn, "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);
            DateTime fecha2 = DateTime.ParseExact(fechaOut, "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);

            // INTRODUCIR FECHAS EN FORMATO 2022-04-28
            con.Open();
            //select *from reservaHotel where (fechaInicio>= '2022-11-22' and fechaFin<= '2022-11-26') or (fechaInicio>= '2022-11-22' and fechaInicio<='2022-11-28') or (fechaFin>= '2022-11-22' and fechaFin<= '2022-11-28');
            MySqlCommand cmdClave = new MySqlCommand("select codigoCoche from reservaCoche  where (reservaCoche.fechaInicio >= @fecha1 AND reservaCoche.fechaFin <= @fecha2) or (fechaInicio >= @fecha1 and fechaInicio <= @fecha2) or (fechaFin >= @fecha1 and fechaFin <= @fecha2);", con); //cogemos los que no están disponibles
            cmdClave.Parameters.AddWithValue("@fecha1", fecha1);
            cmdClave.Parameters.AddWithValue("@fecha2", fecha2);
            MySqlDataReader reader = cmdClave.ExecuteReader();

            int codigoC = 0;
            List<int> codigosCoches = new List<int>();
            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    codigoC = reader.GetInt32("codigoCoche");
                    codigosCoches.Add(codigoC);
                }

                con.Close();
            }

            if (codigosCoches.Count == 0)      //si no hay ninguna reserva entre esas fechas
            {
                string exampleJson = "[";
                List<Coche> leidos = new List<Coche>();
                Console.WriteLine(codigosCoches.Count);
                con.Close();
                con.Open();
                MySqlCommand cmdClave5 = new MySqlCommand("select count(*) from coche where lugar=@lugar", con);
                cmdClave5.Parameters.AddWithValue("@lugar", lugar);
                var readerContar = cmdClave5.ExecuteScalar();
                con.Close();
                con.Open();
                MySqlCommand cmdClave2 = new MySqlCommand("select * from coche where lugar=@lugar", con);
                cmdClave2.Parameters.AddWithValue("@lugar", lugar);
                MySqlDataReader reader2 = cmdClave2.ExecuteReader();

                var contador = 1;
                string disp = "";

                while (reader2.Read())
                {
                    Coche coche = new Coche();
                    coche.Id = reader2.GetInt32("id");
                    coche.Marca = reader2.GetString("marca");
                    coche.Modelo = reader2.GetString("modelo");
                    coche.NumPuertas = reader2.GetInt32("num_puertas");
                    coche.Puntuacion = reader2.GetInt32("puntuacion");
                    coche.PrecioDia = reader2.GetInt32("precio_Dia");
                    coche.NumPlazas = reader2.GetInt32("numPlazas");
                    coche.Lugar = reader2.GetString("lugar");
                    coche.Disponible = reader2.GetBoolean("disponible");
                    if (reader2.GetBoolean("disponible"))
                    {
                        disp = "true";
                    }
                    else
                    {
                        disp = "false";
                    }

                    
                    bool repetido = false;
                    for (int i = 0; i < leidos.Count; i++)
                    {
                        if (leidos[i].Id == coche.Id)
                        {
                            repetido = true;
                        }
                    }
                    if (!repetido)
                    {
                        leidos.Add(coche);
                        exampleJson += " {\n  \"marca\" : \"" + coche.Marca.ToString() + "\",\n  \"puntuacion\" : " + coche.Puntuacion.ToString() + ",\n  \"num_puertas\" : " + coche.NumPuertas.ToString() + ",\n  \"numPlazas\" : " + coche.NumPlazas.ToString() + ",\n  \"lugar\" : \"" + coche.Lugar.ToString() + "\",\n  \"id\" : " + coche.Id.ToString() + ",\n  \"precio_Dia\" : " + coche.PrecioDia.ToString() + ",\n  \"modelo\" : \"" + coche.Modelo.ToString() + "\",\n  \"disponible\" : " + disp.ToString() + "\n}";

                        if (!(contador).ToString().Equals(readerContar.ToString()))
                        {
                            exampleJson += ", ";
                        }
                        contador++;
                    }
                }
                con.Close();

                exampleJson += " ]";
                var example = exampleJson != null
                    ? JsonConvert.DeserializeObject<List<Coche>>(exampleJson)
                    : default(List<Coche>);

                if (exampleJson == null)
                {
                    return new ObjectResult("ERROR 400: NO EXISTEN COCHES") { StatusCode = 400 };
                }
                else
                {
                    coches = JsonConvert.DeserializeObject<List<Coche>>(exampleJson);
                    Console.WriteLine(exampleJson);
                    return new ObjectResult(exampleJson) { StatusCode = 200 };
                }

            }
            else    //si hay alguna reserva entre esas fechas
            {
                string exampleJson = "[";
                List<Coche> leidos = new List<Coche>();
                foreach (int codigoCoche in codigosCoches)
                {
                    con.Open();
                    MySqlCommand cmdClave5 = new MySqlCommand("select count(*) from coche where id NOT IN (@id) and lugar=@lugar", con);
                    cmdClave5.Parameters.AddWithValue("@id", codigoCoche);
                    cmdClave5.Parameters.AddWithValue("@lugar", lugar);
                    var readerContar = cmdClave5.ExecuteScalar();
                    con.Close();
                    con.Open();
                    MySqlCommand cmdClave2 = new MySqlCommand("select * from coche where id NOT IN (@id) and lugar=@lugar", con);
                    cmdClave2.Parameters.AddWithValue("@id", codigoCoche);
                    cmdClave2.Parameters.AddWithValue("@lugar", lugar);
                    MySqlDataReader reader2 = cmdClave2.ExecuteReader();

                    var contador = 1;
                    string disp = "";

                    while (reader2.Read())
                    {
                        Coche coche = new Coche();
                        coche.Id = reader2.GetInt32("id");
                        coche.Marca = reader2.GetString("marca");
                        coche.Modelo = reader2.GetString("modelo");
                        coche.NumPuertas = reader2.GetInt32("num_puertas");
                        coche.Puntuacion = reader2.GetInt32("puntuacion");
                        coche.PrecioDia = reader2.GetInt32("precio_Dia");
                        coche.NumPlazas = reader2.GetInt32("numPlazas");
                        coche.Lugar = reader2.GetString("lugar");
                        coche.Disponible = reader2.GetBoolean("disponible");
                        if (reader2.GetBoolean("disponible"))
                        {
                            disp = "true";
                        }
                        else
                        {
                            disp = "false";
                        }


                        bool repetido = false;
                        for (int i = 0; i < leidos.Count; i++)
                        {
                            if (leidos[i].Id == coche.Id)
                            {
                                repetido = true;
                            }
                        }
                        if (!repetido)
                        {
                            leidos.Add(coche);
                            exampleJson += " {\n  \"marca\" : \"" + coche.Marca.ToString() + "\",\n  \"puntuacion\" : " + coche.Puntuacion.ToString() + ",\n  \"num_puertas\" : " + coche.NumPuertas.ToString() + ",\n  \"numPlazas\" : " + coche.NumPlazas.ToString() + ",\n  \"lugar\" : \"" + coche.Lugar.ToString() + "\",\n  \"id\" : " + coche.Id.ToString() + ",\n  \"precio_Dia\" : " + coche.PrecioDia.ToString() + ",\n  \"modelo\" : \"" + coche.Modelo.ToString() + "\",\n  \"disponible\" : " + disp.ToString() + "\n}";

                            if (!(contador).ToString().Equals(readerContar.ToString()))
                            {
                                exampleJson += ", ";
                            }
                            contador++;
                        }
                    }
                    con.Close();
                }

                exampleJson += " ]";
                var example = exampleJson != null
                    ? JsonConvert.DeserializeObject<List<Coche>>(exampleJson)
                    : default(List<Coche>);

                if (exampleJson == null)
                {
                    return new ObjectResult("ERROR 400: NO EXISTEN COCHES") { StatusCode = 400 };
                }
                else
                {
                    coches = JsonConvert.DeserializeObject<List<Coche>>(exampleJson);
                    Console.WriteLine(exampleJson);
                    return new ObjectResult(exampleJson) { StatusCode = 200 };
                }
            }
        }

        /// <summary>
        /// Comprobar coches para esas caracterísiticas
        /// </summary>
        /// <param name="n">Número de personas</param>
        /// <param name="listaCoches">Lista de coches que cumplen las características anteriores</param>
        /// <response code="200">Coches con las características</response>
        /// <response code="400">ERROR 400: No hay coches con esas características</response>
        [HttpPost]
        [Route("/aditwitter20212022/proyecto/1.0.0/comprobarPersonasCoche/{n}")]
        [ValidateModelState]
        [SwaggerOperation("ComprobarPersonasCocheNPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Coche>), description: "Coches con las características")]
        public virtual IActionResult ComprobarPersonasCocheNPost([FromRoute][Required]int? n, [FromBody][Required()]List<Coche> listaCoches)
        {
            List<Coche> filtradoCoches = new List<Coche>();

            MySqlConnection con = new MySqlConnection();
            con.ConnectionString = "server=localhost;user id=root;database=companiarea;Password=root";
            con.Open();
            for (int i = 0; i < listaCoches.Count; i++)
            {
                if (listaCoches[i].NumPlazas == n)
                {
                    filtradoCoches.Add(listaCoches[i]);
                }
            }
            coches = filtradoCoches;

            string exampleJson = "[";
            string disp = "";
            for (int i = 0; i < filtradoCoches.Count; i++)
            {
                if (filtradoCoches[i].Disponible.Value)
                {
                    disp = "true";
                }
                else
                {
                    disp = "false";
                }
                exampleJson += " {\n  \"marca\" : \"" + filtradoCoches[i].Marca.ToString() + "\",\n  \"puntuacion\" : " + filtradoCoches[i].Puntuacion.ToString() + ",\n  \"num_puertas\" : " + filtradoCoches[i].NumPuertas.ToString() + ",\n  \"numPlazas\" : " + filtradoCoches[i].NumPlazas.ToString() + ",\n  \"lugar\" : \"" + filtradoCoches[i].Lugar.ToString() + "\",\n  \"id\" : " + filtradoCoches[i].Id.ToString() + ",\n  \"precio_Dia\" : " + filtradoCoches[i].PrecioDia.ToString() + ",\n  \"modelo\" : \"" + filtradoCoches[i].Modelo.ToString() + "\",\n  \"disponible\" : " + disp.ToString() + "\n}";
                    if (i != (filtradoCoches.Count - 1))
                {
                    exampleJson += ", ";
                }
            }
            exampleJson += " ]";
            var example = exampleJson != null
                ? JsonConvert.DeserializeObject<List<Coche>>(exampleJson)
                : default(List<Coche>);
            con.Close();
            if (exampleJson == null)
            {
                return new ObjectResult("ERROR 400: NO EXISTEN COCHES") { StatusCode = 400 };
            }

            return new ObjectResult(exampleJson) { StatusCode = 200 };
        }

        /// <summary>
        /// Comprobar coches para esas caracterísiticas
        /// </summary>
        /// <param name="precioInicio">Rango inicial del precio</param>
        /// <param name="precioFin">Rango final del precio</param>
        /// <param name="listaCoches">Lista de coches que cumplen las características anteriores</param>
        /// <response code="200">Coches con las características</response>
        /// <response code="400">ERROR 400: No hay coches con esas características</response>
        [HttpPost]
        [Route("/aditwitter20212022/proyecto/1.0.0/comprobarPreciosCoche/{precioInicio}/{precioFin}")]
        [ValidateModelState]
        [SwaggerOperation("ComprobarPreciosCochePrecioInicioPrecioFinPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Coche>), description: "Coches con las características")]
        public virtual IActionResult ComprobarPreciosCochePrecioInicioPrecioFinPost([FromRoute][Required]decimal? precioInicio, [FromRoute][Required]decimal? precioFin, [FromBody][Required()]List<Coche> listaCoches)
        {
            List<Coche> filtradoCoches = new List<Coche>();

            MySqlConnection con = new MySqlConnection();
            con.ConnectionString = "server=localhost;user id=root;database=companiarea;Password=root";
            con.Open();
            for (int i = 0; i < listaCoches.Count; i++)
            {
                if (listaCoches[i].PrecioDia <= precioFin && listaCoches[i].PrecioDia >= precioInicio)
                {
                    filtradoCoches.Add(listaCoches[i]);
                }
            }
            coches = filtradoCoches;

            string exampleJson = "[";
            string disp = "";
            for (int i = 0; i < filtradoCoches.Count; i++)
            {
                if (filtradoCoches[i].Disponible.Value)
                {
                    disp = "true";
                }
                else
                {
                    disp = "false";
                }
                exampleJson += " {\n  \"marca\" : \"" + filtradoCoches[i].Marca.ToString() + "\",\n  \"puntuacion\" : " + filtradoCoches[i].Puntuacion.ToString() + ",\n  \"num_puertas\" : " + filtradoCoches[i].NumPuertas.ToString() + ",\n  \"numPlazas\" : " + filtradoCoches[i].NumPlazas.ToString() + ",\n  \"lugar\" : \"" + filtradoCoches[i].Lugar.ToString() + "\",\n  \"id\" : " + filtradoCoches[i].Id.ToString() + ",\n  \"precio_Dia\" : " + filtradoCoches[i].PrecioDia.ToString() + ",\n  \"modelo\" : \"" + filtradoCoches[i].Modelo.ToString() + "\",\n  \"disponible\" : " + disp.ToString() + "\n}";
                if (i != (filtradoCoches.Count - 1))
                {
                    exampleJson += ", ";
                }
            }
            exampleJson += " ]";
            var example = exampleJson != null
                ? JsonConvert.DeserializeObject<List<Coche>>(exampleJson)
                : default(List<Coche>);
            con.Close();
            if (exampleJson == null)
            {
                return new ObjectResult("ERROR 400: NO EXISTEN COCHES") { StatusCode = 400 };
            }

            return new ObjectResult(exampleJson) { StatusCode = 200 };
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Eliminar reserva</remarks>
        /// <param name="id">pasar id de la reserva a borrar</param>
        /// <response code="204">Reserva borrada</response>
        /// <response code="404">No se ha encontrado la reserva</response>
        [HttpDelete]
        [Route("/aditwitter20212022/proyecto/1.0.0/reserva/coches/borrar/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ReservaCochesBorrarIdDelete")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse404), description: "No se ha encontrado la reserva")]
        public virtual IActionResult ReservaCochesBorrarIdDelete([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(InlineResponse404));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Ver detalles de la reserva</remarks>
        /// <param name="id">pasar id de la reserva del coche</param>
        /// <response code="200">Reserva del coche se devuelve</response>
        /// <response code="400">No existe la reserva del coche</response>
        [HttpGet]
        [Route("/aditwitter20212022/proyecto/1.0.0/reserva/coches/consultar/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ReservaCochesConsultarIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReservaCoche), description: "Reserva del coche se devuelve")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse4001), description: "No existe la reserva del coche")]
        public virtual IActionResult ReservaCochesConsultarIdGet([FromRoute][Required]int? id)
        {
            MySqlConnection con = new MySqlConnection();
            con.ConnectionString = "server=localhost;user id=root;database=companiarea;Password=root";
            con.Open();
            string exampleJson = null;
            if (id != null)
            {
                MySqlCommand cmdClave = new MySqlCommand("select * from reservaCoche where idReserva=@id", con);
                cmdClave.Parameters.AddWithValue("@id", id);
                MySqlDataReader reader = cmdClave.ExecuteReader();

                if (reader.Read())
                {
                    int idReserva = reader.GetInt32("idReserva");
                    int idCoche = reader.GetInt32("codigoCoche");
                    string dni = reader.GetString("dniCliente");
                    double precioTotal = reader.GetDouble("precioTotal");
                    string fechaInicio = reader.GetString("fechaInicio");
                    string fechaFin = reader.GetString("fechaFin");
                    con.Close();

                    exampleJson = "{\n  \"fechaInicio\" : \"" + fechaInicio + "\",\n  \"dniCliente\" : \"" + dni + "\",\n  \"precioTotal\" : " + precioTotal.ToString() + ",\n  \"codigoCoche\" : \"" + idCoche.ToString() + "\",\n  \"fechaFin\" : \"" + fechaFin + "\",\n  \"idReserva\" : " + id.ToString() + "\n}";
                }

                var example = exampleJson != null
                ? JsonConvert.DeserializeObject<ReservaCoche>(exampleJson)
                : default(ReservaCoche);            //TODO: Change the data returned
                return new ObjectResult(example);
            }
            else
            {
                return new ObjectResult("ERROR 400: NO EXISTE LA RESERVA") { StatusCode = 400 };
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Decrementar precio de la reserva del coche</remarks>
        /// <param name="id">pasar id de la reserva</param>
        /// <param name="body">Reserva del coche</param>
        /// <response code="201">Coche modificado</response>
        /// <response code="404">Coche no encontrado</response>
        [HttpPut]
        [Route("/aditwitter20212022/proyecto/1.0.0/reserva/coches/modificar/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ReservaCochesModificarIdPut")]
        public virtual IActionResult ReservaCochesModificarIdPut([FromRoute][Required]int? id, [FromBody]ReservaCoche body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Crear una reserva del coche</remarks>
        /// <param name="idCoche">pasar el id del mejor coche</param>
        /// <param name="body">Reserva de Coche</param>
        /// <response code="201">Reserva del coche creada</response>
        /// <response code="400">No existe ese coche</response>
        /// <response code="409">Esa reserva ya existe</response>
        [HttpPost]
        [Route("/aditwitter20212022/proyecto/1.0.0/reserva/coches/nuevo")]
        [ValidateModelState]
        [SwaggerOperation("ReservaCochesNuevoPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "No existe ese coche")]
        [SwaggerResponse(statusCode: 409, type: typeof(InlineResponse409), description: "Esa reserva ya existe")]
        public virtual IActionResult ReservaCochesNuevoPost([FromQuery][Required()]int? idCoche, [FromQuery][Required()] string dniCliente, [FromQuery][Required()] string fechaIn, [FromQuery][Required()] string fechaOut)
        {
            MySqlConnection con = new MySqlConnection();
            con.ConnectionString = "server=localhost;user id=root;database=companiarea;Password=root";
            con.Open();
            if (idCoche != null)
            {
                MySqlCommand cmdClave = new MySqlCommand("select * from coche where id=@idCoche", con);
                cmdClave.Parameters.AddWithValue("@idCoche", idCoche);
                MySqlDataReader reader = cmdClave.ExecuteReader();


                if (reader.Read())
                {
                    double precioDia = reader.GetDouble("precio_Dia");
                    double precioTotal = 0;
                    con.Close();
                    con.Open();
                    MySqlCommand cmdClave1 = new MySqlCommand("ALTER TABLE reservaCoche MODIFY fechaInicio date", con);
                    cmdClave1.ExecuteReader();
                    con.Close();

                    con.Open();
                    MySqlCommand cmdClave3 = new MySqlCommand("ALTER TABLE reservaCoche MODIFY fechaFin date", con);
                    cmdClave3.ExecuteReader();
                    con.Close();
                    DateTime fecha1 = DateTime.ParseExact(fechaIn, "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);
                    DateTime fecha2 = DateTime.ParseExact(fechaOut, "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);
                    int totalDias = (fecha2 - fecha1).Days;
                    precioTotal = totalDias * precioDia;
                    con.Open();
                    MySqlCommand cmdClave2 = new MySqlCommand("insert into  reservaCoche (codigoCoche,dniCliente,precioTotal,fechaInicio,fechaFin )values ('" + idCoche + "','" + dniCliente + "','" + precioTotal + "','" + fechaIn + "','" + fechaOut + "')", con);

                    cmdClave2.ExecuteNonQuery();
                    con.Close();
                }
                return new ObjectResult("RESERVA CONFIRMADA") { StatusCode = 201 };

            }
            else
            {
                return new ObjectResult("ERROR 400: NO EXISTEN COCHES") { StatusCode = 400 };
            }
        }
    }
}
