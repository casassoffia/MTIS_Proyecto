/*
 * SERVICIOS PROYECTO
 *
 * API del PROYECTO
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class COCHEApiController : ControllerBase
    { 
        /// <summary>
        /// Obtiene el coche con mejor puntuación
        /// </summary>
        /// <param name="coches">pasar lista de coches</param>
        /// <response code="200">Coche con mejor puntuación</response>
        /// <response code="400">No hay ningún coche</response>
        [HttpGet]
        [Route("/aditwitter20212022/proyecto/1.0.0/coches")]
        [ValidateModelState]
        [SwaggerOperation("CochesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Coche), description: "Coche con mejor puntuación")]
        public virtual IActionResult CochesGet([FromQuery][Required()]Coche coches)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Coche));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "{\n  \"marca\" : \"Mercedes\",\n  \"puntuacion\" : 5,\n  \"num_puertas\" : 5,\n  \"numPlazas\" : 5,\n  \"lugar\" : \"Murcia\",\n  \"id\" : 1,\n  \"precio_Dia\" : 20,\n  \"modelo\" : \"modelo\",\n  \"disponible\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Coche>(exampleJson)
                        : default(Coche);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Comprobar coches disponibles
        /// </summary>
        /// <param name="listaCoches">Lista de coches que cumplen las características anteriores</param>
        /// <response code="200">Coches con las características</response>
        /// <response code="400">ERROR 400: No hay coches con esas características</response>
        [HttpPost]
        [Route("/aditwitter20212022/proyecto/1.0.0/comprobarDisponibilidadCoche")]
        [ValidateModelState]
        [SwaggerOperation("ComprobarDisponibilidadCochePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Coche>), description: "Coches con las características")]
        public virtual IActionResult ComprobarDisponibilidadCochePost([FromQuery][Required()]List<Coche> listaCoches)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Coche>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"marca\" : \"Mercedes\",\n  \"puntuacion\" : 5,\n  \"num_puertas\" : 5,\n  \"numPlazas\" : 5,\n  \"lugar\" : \"Murcia\",\n  \"id\" : 1,\n  \"precio_Dia\" : 20,\n  \"modelo\" : \"modelo\",\n  \"disponible\" : true\n}, {\n  \"marca\" : \"Mercedes\",\n  \"puntuacion\" : 5,\n  \"num_puertas\" : 5,\n  \"numPlazas\" : 5,\n  \"lugar\" : \"Murcia\",\n  \"id\" : 1,\n  \"precio_Dia\" : 20,\n  \"modelo\" : \"modelo\",\n  \"disponible\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Coche>>(exampleJson)
                        : default(List<Coche>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Comprobar coches para esas caracterísiticas
        /// </summary>
        /// <param name="fechaIn">Check-in con formato YYYY-MM-DD</param>
        /// <param name="fechaOut">Check-out con formato YYYY-MM-DD</param>
        /// <param name="lugar">Pasar lugar de la estancia del coche</param>
        /// <response code="200">Coches con las características</response>
        /// <response code="400">ERROR 400: No hay coches con esas características</response>
        [HttpPost]
        [Route("/aditwitter20212022/proyecto/1.0.0/comprobarFechaLugarCoche/{fechaIn}/{fechaOut}/{lugar}")]
        [ValidateModelState]
        [SwaggerOperation("ComprobarFechaLugarCocheFechaInFechaOutLugarPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Coche>), description: "Coches con las características")]
        public virtual IActionResult ComprobarFechaLugarCocheFechaInFechaOutLugarPost([FromRoute][Required]string fechaIn, [FromRoute][Required]string fechaOut, [FromRoute][Required]string lugar)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Coche>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"marca\" : \"Mercedes\",\n  \"puntuacion\" : 5,\n  \"num_puertas\" : 5,\n  \"numPlazas\" : 5,\n  \"lugar\" : \"Murcia\",\n  \"id\" : 1,\n  \"precio_Dia\" : 20,\n  \"modelo\" : \"modelo\",\n  \"disponible\" : true\n}, {\n  \"marca\" : \"Mercedes\",\n  \"puntuacion\" : 5,\n  \"num_puertas\" : 5,\n  \"numPlazas\" : 5,\n  \"lugar\" : \"Murcia\",\n  \"id\" : 1,\n  \"precio_Dia\" : 20,\n  \"modelo\" : \"modelo\",\n  \"disponible\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Coche>>(exampleJson)
                        : default(List<Coche>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Comprobar coches para esas caracterísiticas
        /// </summary>
        /// <param name="n">Número de personas</param>
        /// <param name="listaCoches">Lista de coches que cumplen las características anteriores</param>
        /// <response code="200">Coches con las características</response>
        /// <response code="400">ERROR 400: No hay coches con esas características</response>
        [HttpPost]
        [Route("/aditwitter20212022/proyecto/1.0.0/comprobarPersonasCoche/{n}")]
        [ValidateModelState]
        [SwaggerOperation("ComprobarPersonasCocheNPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Coche>), description: "Coches con las características")]
        public virtual IActionResult ComprobarPersonasCocheNPost([FromRoute][Required]int? n, [FromQuery][Required()]List<Coche> listaCoches)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Coche>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"marca\" : \"Mercedes\",\n  \"puntuacion\" : 5,\n  \"num_puertas\" : 5,\n  \"numPlazas\" : 5,\n  \"lugar\" : \"Murcia\",\n  \"id\" : 1,\n  \"precio_Dia\" : 20,\n  \"modelo\" : \"modelo\",\n  \"disponible\" : true\n}, {\n  \"marca\" : \"Mercedes\",\n  \"puntuacion\" : 5,\n  \"num_puertas\" : 5,\n  \"numPlazas\" : 5,\n  \"lugar\" : \"Murcia\",\n  \"id\" : 1,\n  \"precio_Dia\" : 20,\n  \"modelo\" : \"modelo\",\n  \"disponible\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Coche>>(exampleJson)
                        : default(List<Coche>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Comprobar coches para esas caracterísiticas
        /// </summary>
        /// <param name="precioInicio">Rango inicial del precio</param>
        /// <param name="precioFin">Rango final del precio</param>
        /// <param name="listaCoches">Lista de coches que cumplen las características anteriores</param>
        /// <response code="200">Coches con las características</response>
        /// <response code="400">ERROR 400: No hay coches con esas características</response>
        [HttpPost]
        [Route("/aditwitter20212022/proyecto/1.0.0/comprobarPreciosCoche/{precioInicio}/{precioFin}")]
        [ValidateModelState]
        [SwaggerOperation("ComprobarPreciosCochePrecioInicioPrecioFinPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Coche>), description: "Coches con las características")]
        public virtual IActionResult ComprobarPreciosCochePrecioInicioPrecioFinPost([FromRoute][Required]decimal? precioInicio, [FromRoute][Required]decimal? precioFin, [FromQuery][Required()]List<Coche> listaCoches)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Coche>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"marca\" : \"Mercedes\",\n  \"puntuacion\" : 5,\n  \"num_puertas\" : 5,\n  \"numPlazas\" : 5,\n  \"lugar\" : \"Murcia\",\n  \"id\" : 1,\n  \"precio_Dia\" : 20,\n  \"modelo\" : \"modelo\",\n  \"disponible\" : true\n}, {\n  \"marca\" : \"Mercedes\",\n  \"puntuacion\" : 5,\n  \"num_puertas\" : 5,\n  \"numPlazas\" : 5,\n  \"lugar\" : \"Murcia\",\n  \"id\" : 1,\n  \"precio_Dia\" : 20,\n  \"modelo\" : \"modelo\",\n  \"disponible\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Coche>>(exampleJson)
                        : default(List<Coche>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Eliminar reserva</remarks>
        /// <param name="id">pasar id de la reserva a borrar</param>
        /// <response code="204">Reserva borrada</response>
        /// <response code="404">No se ha encontrado la reserva</response>
        [HttpDelete]
        [Route("/aditwitter20212022/proyecto/1.0.0/reserva/coches/borrar/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ReservaCochesBorrarIdDelete")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse404), description: "No se ha encontrado la reserva")]
        public virtual IActionResult ReservaCochesBorrarIdDelete([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(InlineResponse404));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Ver detalles de la reserva</remarks>
        /// <param name="id">pasar id de la reserva del coche</param>
        /// <response code="200">Reserva del coche se devuelve</response>
        /// <response code="400">No existe la reserva del coche</response>
        [HttpGet]
        [Route("/aditwitter20212022/proyecto/1.0.0/reserva/coches/consultar/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ReservaCochesConsultarIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReservaCoche), description: "Reserva del coche se devuelve")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse4001), description: "No existe la reserva del coche")]
        public virtual IActionResult ReservaCochesConsultarIdGet([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ReservaCoche));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse4001));
            string exampleJson = null;
            exampleJson = "{\n  \"codigoCoche\" : \"codigoCoche\",\n  \"fechaInicio\" : \"fechaInicio\",\n  \"dniCliente\" : \"dniCliente\",\n  \"precioTotal\" : 6.027456183070403,\n  \"fechaFin\" : \"fechaFin\",\n  \"idReserva\" : 0\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ReservaCoche>(exampleJson)
                        : default(ReservaCoche);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Decrementar precio de la reserva del coche</remarks>
        /// <param name="id">pasar id de la reserva</param>
        /// <param name="body">Reserva del coche</param>
        /// <response code="201">Coche modificado</response>
        /// <response code="404">Coche no encontrado</response>
        [HttpPut]
        [Route("/aditwitter20212022/proyecto/1.0.0/reserva/coches/modificar/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ReservaCochesModificarIdPut")]
        public virtual IActionResult ReservaCochesModificarIdPut([FromRoute][Required]int? id, [FromBody]ReservaCoche body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Crear una reserva del coche</remarks>
        /// <param name="idCoche">pasar el id del mejor coche</param>
        /// <param name="body">Reserva de Coche</param>
        /// <response code="201">Reserva del coche creada</response>
        /// <response code="400">No existe ese coche</response>
        /// <response code="409">Esa reserva ya existe</response>
        [HttpPost]
        [Route("/aditwitter20212022/proyecto/1.0.0/reserva/coches/nuevo")]
        [ValidateModelState]
        [SwaggerOperation("ReservaCochesNuevoPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "No existe ese coche")]
        [SwaggerResponse(statusCode: 409, type: typeof(InlineResponse409), description: "Esa reserva ya existe")]
        public virtual IActionResult ReservaCochesNuevoPost([FromQuery][Required()]int? idCoche, [FromBody]ReservaCoche body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse400));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(InlineResponse409));

            throw new NotImplementedException();
        }
    }
}
