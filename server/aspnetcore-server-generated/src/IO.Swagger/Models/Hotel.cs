/*
 * Hotel
 *
 * API del HOTEL
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Hotel : IEquatable<Hotel>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets PrecioNoche
        /// </summary>

        [DataMember(Name="precioNoche")]
        public decimal? PrecioNoche { get; set; }

        /// <summary>
        /// Gets or Sets NumeroPersonas
        /// </summary>

        [DataMember(Name="numeroPersonas")]
        public int? NumeroPersonas { get; set; }

        /// <summary>
        /// Gets or Sets Puntuacion
        /// </summary>

        [DataMember(Name="puntuacion")]
        public int? Puntuacion { get; set; }

        /// <summary>
        /// Gets or Sets Disponibilidad
        /// </summary>

        [DataMember(Name="disponibilidad")]
        public bool? Disponibilidad { get; set; }

        /// <summary>
        /// Gets or Sets Lugar
        /// </summary>

        [DataMember(Name="lugar")]
        public string Lugar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Hotel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PrecioNoche: ").Append(PrecioNoche).Append("\n");
            sb.Append("  NumeroPersonas: ").Append(NumeroPersonas).Append("\n");
            sb.Append("  Puntuacion: ").Append(Puntuacion).Append("\n");
            sb.Append("  Disponibilidad: ").Append(Disponibilidad).Append("\n");
            sb.Append("  Lugar: ").Append(Lugar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Hotel)obj);
        }

        /// <summary>
        /// Returns true if Hotel instances are equal
        /// </summary>
        /// <param name="other">Instance of Hotel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Hotel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    PrecioNoche == other.PrecioNoche ||
                    PrecioNoche != null &&
                    PrecioNoche.Equals(other.PrecioNoche)
                ) && 
                (
                    NumeroPersonas == other.NumeroPersonas ||
                    NumeroPersonas != null &&
                    NumeroPersonas.Equals(other.NumeroPersonas)
                ) && 
                (
                    Puntuacion == other.Puntuacion ||
                    Puntuacion != null &&
                    Puntuacion.Equals(other.Puntuacion)
                ) && 
                (
                    Disponibilidad == other.Disponibilidad ||
                    Disponibilidad != null &&
                    Disponibilidad.Equals(other.Disponibilidad)
                ) && 
                (
                    Lugar == other.Lugar ||
                    Lugar != null &&
                    Lugar.Equals(other.Lugar)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (PrecioNoche != null)
                    hashCode = hashCode * 59 + PrecioNoche.GetHashCode();
                    if (NumeroPersonas != null)
                    hashCode = hashCode * 59 + NumeroPersonas.GetHashCode();
                    if (Puntuacion != null)
                    hashCode = hashCode * 59 + Puntuacion.GetHashCode();
                    if (Disponibilidad != null)
                    hashCode = hashCode * 59 + Disponibilidad.GetHashCode();
                    if (Lugar != null)
                    hashCode = hashCode * 59 + Lugar.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Hotel left, Hotel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Hotel left, Hotel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
