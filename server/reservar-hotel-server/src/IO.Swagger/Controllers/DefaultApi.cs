/*
 * RESERVAR HOTEL
 *
 * API para RESERVAR HOTEL
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using MySql.Data.MySqlClient;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Eliminar reserva</remarks>
        /// <param name="id">pasar id de la reserva a borrar</param>
        /// <response code="204">Reserva borrada</response>
        /// <response code="404">No se ha encontrado la reserva</response>
        [HttpDelete]
        [Route("/futratioiw/ReservaHotel/1.0.0/reserva/hoteles/borrar/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ReservaHotelesBorrarIdDelete")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse404), description: "No se ha encontrado la reserva")]
        public virtual IActionResult ReservaHotelesBorrarIdDelete([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(InlineResponse404));

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Ver detalles de la reserva</remarks>
        /// <param name="id">pasar id de la reserva del hotek</param>
        /// <response code="200">Reserva del hotel se devuelve</response>
        /// <response code="400">No existe la reserva del hotel</response>
        [HttpGet]
        [Route("/futratioiw/ReservaHotel/1.0.0/reserva/hoteles/consultar/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ReservaHotelesConsultarIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReservaHotel), description: "Reserva del hotel se devuelve")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse4001), description: "No existe la reserva del hotel")]
        public virtual IActionResult ReservaHotelesConsultarIdGet([FromRoute][Required]int? id)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ReservaHotel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse4001));
            MySqlConnection con = new MySqlConnection();
            con.ConnectionString = "server=localhost;user id=root;database=companiarea;Password=root";
            con.Open();
            string exampleJson = null;
            if (id != null)
            {
                MySqlCommand cmdClave = new MySqlCommand("select * from reservaHotel where idReserva=@id", con);
                cmdClave.Parameters.AddWithValue("@id", id);
                MySqlDataReader reader = cmdClave.ExecuteReader();

                if (reader.Read())
                {
                    int idReserva = reader.GetInt32("idReserva");
                    string dni = reader.GetString("dniCliente");
                    int idHotel = reader.GetInt32("codigoHotel");
                    double precioTotal = reader.GetDouble("precioTotal");
                    string fechaInicio = reader.GetString("fechaInicio");
                    string fechaFin = reader.GetString("fechaFin");
                    con.Close();
                    
                    exampleJson = "{\n  \"fechaInicio\" : \""+ fechaInicio + "\",\n  \"dniCliente\" : \""+ dni + "\",\n  \"precioTotal\" : "+ precioTotal.ToString() + ",\n  \"codigoHotel\" : \""+ idHotel.ToString() + "\",\n  \"fechaFin\" : \""+fechaFin+"\",\n  \"idReserva\" : "+id.ToString()+"\n}";
                }

                var example = exampleJson != null
                ? JsonConvert.DeserializeObject<ReservaHotel>(exampleJson)
                : default(ReservaHotel);            //TODO: Change the data returned
                return new ObjectResult(example);
            }
            else
            {
                return new ObjectResult("ERROR 400: NO EXISTE LA RESERVA") { StatusCode = 400 };
            }
               
            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Decrementar precio de la reserva del hotel</remarks>
        /// <param name="id">pasar id de la reserva</param>
        /// <param name="body">Reserva del hotel</param>
        /// <response code="201">Hotel modificado</response>
        /// <response code="404">Hotel no encontrado</response>
        [HttpPut]
        [Route("/futratioiw/ReservaHotel/1.0.0/reserva/hoteles/modificar/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ReservaHotelesModificarIdPut")]
        public virtual IActionResult ReservaHotelesModificarIdPut([FromRoute][Required]int? id, [FromBody]ReservaHotel body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Crear una reserva del hotel</remarks>
        /// <param name="idHotel">pasar el id del mejor hotel</param>
        /// <param name="body">Reserva de Hotel</param>
        /// <response code="201">Reserva del hotel creada</response>
        /// <response code="400">No existe ese hotel</response>
        /// <response code="409">Esa reserva ya existe</response>
        [HttpPost]
        [Route("/futratioiw/ReservaHotel/1.0.0/reserva/hoteles/nuevo")]
        [ValidateModelState]
        [SwaggerOperation("ReservaHotelesNuevoPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse400), description: "No existe ese hotel")]
        [SwaggerResponse(statusCode: 409, type: typeof(InlineResponse409), description: "Esa reserva ya existe")]
        public virtual IActionResult ReservaHotelesNuevoPost([FromQuery][Required()]int? idHotel, [FromQuery][Required()] string dniCliente, [FromQuery][Required] string fechaIn, [FromQuery][Required] string fechaOut)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse400));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(InlineResponse409));
            MySqlConnection con = new MySqlConnection();
            con.ConnectionString = "server=localhost;user id=root;database=companiarea;Password=root";
            con.Open();
            if (idHotel != null)
            {
                MySqlCommand cmdClave = new MySqlCommand("select * from hotel where id=@idHotel",con);
                cmdClave.Parameters.AddWithValue("@idHotel", idHotel);
                MySqlDataReader reader = cmdClave.ExecuteReader();
                
               
                if (reader.Read())
                {
                    double precioNoche = reader.GetDouble("precioNoche");
                    double precioTotal = 0;
                    con.Close();
                    con.Open();
                    MySqlCommand cmdClave1 = new MySqlCommand("ALTER TABLE reservaHotel MODIFY fechaInicio date", con);
                    cmdClave1.ExecuteReader();
                    con.Close();

                    con.Open();
                    MySqlCommand cmdClave3 = new MySqlCommand("ALTER TABLE reservaHotel MODIFY fechaFin date", con);
                    cmdClave3.ExecuteReader();
                    con.Close();
                    DateTime fecha1 = DateTime.ParseExact(fechaIn, "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);
                    DateTime fecha2 = DateTime.ParseExact(fechaOut, "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);
                    int totalDias= (fecha2 - fecha1).Days;
                    precioTotal = totalDias * precioNoche;
                    con.Open();
                    MySqlCommand cmdClave2 = new MySqlCommand("insert into  reservaHotel (codigoHotel,dniCliente,precioTotal,fechaInicio,fechaFin )values ('" + idHotel+ "','"+dniCliente+"','"+precioTotal+"','"+fechaIn+ "','"+ fechaOut+"')",con);

                    cmdClave2.ExecuteNonQuery();
                    con.Close();
                }
                return new ObjectResult("RESERVA CONFIRMADA") { StatusCode = 201 };

            }
            else
            {
                return new ObjectResult("ERROR 400: NO EXISTEN HOTELES") { StatusCode = 400 };
            }

            throw new NotImplementedException();
        }
    }
}
